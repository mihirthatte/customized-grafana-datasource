{"version":3,"sources":["../../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","console","log","targets","query","buildQueryParameters","filter","t","hide","length","when","data","datasourceRequest","method","headers","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","target","interpolated","mapToTextValue","series","map","d","i","text","value","isObject","metric_array","rawQuery","seriesName","index","metricValues_array","groupby_field","condition","refId","alias","target_alias"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    console.log(options.targets);\n    //console.log(ctrl.metric_array);\n    //var my_tar = options.target[0];\n    //console.log(my_tar);\n    var query = this.buildQueryParameters(options); \n    console.log(query);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindTables(options) {\n    var target = typeof (options) === \"string\" ? options : options.target;\n    var interpolated = {\n        target: this.templateSrv.replace(target, null, 'regex')\n    };\n   //console.log(interpolated);\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/searchT',\n      data: interpolated,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n\n  metricFindColumns(options) {\n    var target = typeof (options) === \"string\" ? options : options.series;\n    var interpolated = {\n        target: this.templateSrv.replace(target, null, 'regex')\n    };\n    console.log(interpolated);\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/searchC',\n      data: interpolated,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n\n\n\n  metricFindValues(options) {\n    var target = typeof (options) === \"string\" ? options : options.series;\n    var interpolated = {\n        target: this.templateSrv.replace(target, null, 'regex')\n    };\n    console.log(interpolated);\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/searchV',\n      data: interpolated,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n\n\n\n\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n    console.log(options.targets.metric_array);\n\n\tvar query = _.map(options.targets, function(target) {\n\t\tconsole.log(target.rawQuery);\n\n\t\tif(target.rawQuery){\n\t\t\tvar query = target.target;\n\t\t\treturn query;\n\t\t}\n\t\t\n\n\t\telse{\n\t\t\tvar query = 'get ';\n\t\t\tvar seriesName = target.series;\n\t\t\tfor(var index = 0 ; index < target.metric_array.length; index++){\n\t\t\t\tquery+= ' '+target.metric_array[index];\n\t\t\t\tif ( index+1 == target.metric_array.length){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tquery+=',';\n\t\t\t}\t\t\n\t\t\tconsole.log(query);\n\n\t\t\tfor(var index = 0 ; index < target.metricValues_array.length; index++){\n                        \tquery+= ' , values.'+target.metricValues_array[index]; \n                \t}\n                \tconsole.log(query);\n\t\t\n\t\t\tquery+= ' between ($START,$END)';\n\t\t\tif (target.groupby_field != \" \") {\n                \t\tquery += ' by ' + target.groupby_field;\n                \t}\n        \t\tquery += ' from ' + seriesName;\n\t\t\tif (target.condition) {\n     \t\t\t\tquery += ' where ' + target.condition;\n   \t\t\t}\n\t\t\ttarget.target = query;\n\t\t\treturn query;\n\t\t}\n\t}); \n\n    var targets = _.map(options.targets, target => {\n\tconsole.log(target);\n      return {\n        //target: this.templateSrv.replace(target.target),\n        target: query[0],\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n\talias : target.target_alias\n      };\n    });\n    \n    options.targets = targets;\n    console.log(options.targets);\n    return options;\n  }\n}\n"]}